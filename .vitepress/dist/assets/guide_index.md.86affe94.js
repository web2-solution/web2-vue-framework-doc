import{o as n,c as s,b as e,a}from"./app.4ba3de9e.js";const t='{"title":"시작","description":"","frontmatter":{},"headers":[{"level":2,"title":"환경 준비","slug":"환경-준비"},{"level":2,"title":"툴 설정","slug":"툴-설정"},{"level":2,"title":"코드 가져오기","slug":"코드-가져오기"},{"level":3,"title":"GitHub에서 코드 가져오기","slug":"github에서-코드-가져오기"},{"level":2,"title":"설치","slug":"설치"},{"level":3,"title":"Node.js 설치","slug":"node-js-설치"},{"level":3,"title":"패키지 설치","slug":"패키지-설치"},{"level":2,"title":"npm script","slug":"npm-script"}],"relativePath":"guide/index.md","lastUpdated":1722835573435}',o={},l=a('<h1 id="시작"><a class="header-anchor" href="#시작" aria-hidden="true">#</a> 시작</h1><p>본 문서에서는 프로젝트를 처음부터 실행하고 시작하는 방법을 빠르게 안내해 드리겠습니다.</p><h2 id="환경-준비"><a class="header-anchor" href="#환경-준비" aria-hidden="true">#</a> 환경 준비</h2><p>로컬 환경에서는 <a href="https://pnpm.io/" target="_blank" rel="noopener noreferrer">Pnpm</a>、<a href="http://nodejs.org/" target="_blank" rel="noopener noreferrer">Node.js</a> 및 <a href="https://git-scm.com/" target="_blank" rel="noopener noreferrer">Git</a>을 설치해야 합니다.</p><p>왜 <a href="https://pnpm.io/" target="_blank" rel="noopener noreferrer">Pnpm</a>을 사용하는지，다른 패키지 관리자를 사용하지 않는 이유는 여기에서는 자세히 설명하지 않겠습니다.</p><div class="warning custom-block"><p class="custom-block-title">주의</p><ul><li>Node.js 버전 요구 사항은 14.x 이상이며, 16.x 이상의 버전을 권장합니다.</li></ul></div><h2 id="툴-설정"><a class="header-anchor" href="#툴-설정" aria-hidden="true">#</a> 툴 설정</h2><p>만약 사용하는 IDE 가<a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">vscode</a>라면, 개발 효율성과 코드 포맷팅을 향상시키기 위해 다음 도구를 설치 할 수 있습니다.</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=antfu.iconify" target="_blank" rel="noopener noreferrer">Iconify IntelliSense</a> - Iconify 아이콘 플러그인</li><li><a href="https://marketplace.visualstudio.com/items?itemName=antfu.unocss" target="_blank" rel="noopener noreferrer">unocss</a> - unocss 팁 플러그인</li><li><a href="https://marketplace.visualstudio.com/items?itemName=Lokalise.i18n-ally" target="_blank" rel="noopener noreferrer">I18n-ally</a> - i18n 플러그인</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Djohnsoncodehk.volar" target="_blank" rel="noopener noreferrer">Volar</a> - vue 개발 필수 도구</li><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener noreferrer">ESLint</a> - 스크립트 코드 검사</li><li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener noreferrer">Prettier</a> - 코드 포맷팅</li><li><a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint" target="_blank" rel="noopener noreferrer">Stylelint</a> - css 포맷팅</li><li><a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv" target="_blank" rel="noopener noreferrer">DotENV</a> - .env 파일 관리</li></ul><h2 id="코드-가져오기"><a class="header-anchor" href="#코드-가져오기" aria-hidden="true">#</a> 코드 가져오기</h2><div class="warning custom-block"><p class="custom-block-title">주의</p><p>코드를 저장하는 디렉토리 및 모든 상위 디렉토리에는 중국어, 한국어, 일본어 문자나 공백이 없어야 합니다. 그렇지 않으면 패키지를 설치한 후 시작 시 오류가 발생할 수 있습니다.</p></div><h3 id="github에서-코드-가져오기"><a class="header-anchor" href="#github에서-코드-가져오기" aria-hidden="true">#</a> GitHub에서 코드 가져오기</h3><div class="language-bash"><pre><code><span class="token comment"># clone code</span>\n<span class="token function">git</span> clone https://github.com/web2-solution/web2-vue-framework/tree/demo.git\n\n</code></pre></div>',13),p=a('<h2 id="설치"><a class="header-anchor" href="#설치" aria-hidden="true">#</a> 설치</h2><h3 id="node-js-설치"><a class="header-anchor" href="#node-js-설치" aria-hidden="true">#</a> Node.js 설치</h3><p>컴퓨터에<a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer">Node.js</a>가 설치되어 있지 않다면， <code>18.x</code> 이상을 권장합니다.</p><p><strong>확인</strong></p><div class="language-bash"><pre><code><span class="token comment"># npm이 성공적으로 설치되었는지 확인</span>\n<span class="token function">npm</span> -v\n\n<span class="token comment"># node가 성공적으로 설치되었는지 확인</span>\nnode -v\n</code></pre></div><p>여러버전의 <code>node</code>를 동시에 사용해야 하는 경우， <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener noreferrer">Nvm</a> 또는 다른 Node.js버전 관리를 할 수 있습니다.</p><h3 id="패키지-설치"><a class="header-anchor" href="#패키지-설치" aria-hidden="true">#</a> 패키지 설치</h3><h4 id="pnpm-설치"><a class="header-anchor" href="#pnpm-설치" aria-hidden="true">#</a> Pnpm 설치</h4><p><a href="https://pnpm.io/" target="_blank" rel="noopener noreferrer">Pnpm</a>을 사용하여 패키지를 설치하는 것을 권장합니다(다른 패키지 관리자로 설치할 수 없는 경우에는 별도로 처리해야 합니다).</p><p><code>Pnpm</code>이 설치되어 있지 않은 경우, 아래 명령어를 사용하여 전역으로 설치할 수 있습니다.</p><div class="language-bash"><pre><code><span class="token comment"># pnpm 전역 설치</span>\n<span class="token function">npm</span> i -g <span class="token function">pnpm</span>\n\n<span class="token comment"># 확인</span>\n<span class="token function">pnpm</span> -v\n</code></pre></div><h4 id="패키지-설치-1"><a class="header-anchor" href="#패키지-설치-1" aria-hidden="true">#</a> 패키지 설치</h4><p>프로젝트 루트 디렉토리에서 명령 창을 열고 실행한 후, 설치가 완료될 때까지 기다리면 됩니다.</p><div class="language-bash"><pre><code><span class="token comment"># 패키지 설치</span>\n<span class="token function">pnpm</span> i\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">패키지 설치 시 husky 설치 실패</p><p>소스 코드를 <a href="https://github.com/kailong321200875/vue-element-plus-admin" target="_blank" rel="noopener noreferrer">Github</a> 또는 <a href="https://gitee.com/kailong110120130/vue-element-plus-admin" target="_blank" rel="noopener noreferrer">Gitee</a> 에서 직접 다운로드했는지 확인해 보세요. 직접 다운로드한 경우 <code>.git</code> 폴더가 없으며, <code>husky</code>는 <code>git</code>에 의존하므로 설치할 수 없습니다. 이 경우, <code>git init</code> 명령어로 프로젝트를 초기화한 후, 다시 설치를 시도해 보세요.&quot;</p></div><p>패키지 설치가 완료된 후, 다음 명령어를 실행하여 프로젝트를 시작할 수 있습니다:：</p><div class="language-bash"><pre><code><span class="token function">pnpm</span> run dev\n</code></pre></div><h2 id="npm-script"><a class="header-anchor" href="#npm-script" aria-hidden="true">#</a> npm script</h2><div class="language-bash"><pre><code><span class="token string">&quot;scripts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n  <span class="token comment"># 패키지 설치</span>\n  <span class="token string">&quot;i&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;pnpm install&quot;</span>,\n  <span class="token comment"># 로컬 개발 환경 실행</span>\n  <span class="token string">&quot;dev&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;vite --mode base&quot;</span>,\n  <span class="token comment"># typeScript 검사</span>\n  <span class="token string">&quot;ts:check&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;vue-tsc --noEmit&quot;</span>,\n  <span class="token comment"># 프로덕션 환경으로 빌드</span>\n  <span class="token string">&quot;build:pro&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;vite build --mode pro&quot;</span>,\n  <span class="token comment"># 개발 환경으로 빌드</span>\n  <span class="token string">&quot;build:dev&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;npm run ts:check &amp;&amp; vite build --mode dev&quot;</span>,\n  <span class="token comment"># 테스트 환경으로 빌드</span>\n  <span class="token string">&quot;build:test&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;npm run ts:check &amp;&amp; vite build --mode test&quot;</span>,\n  <span class="token comment"># 프로덕션 환경으로 빌드된 프로젝트 패키지 로컬 미리보기</span>\n  <span class="token string">&quot;serve:pro&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;vite preview --mode pro&quot;</span>,\n  <span class="token comment"># 개발 환경으로 빌드된 프로젝트 패키지 로컬 미리보기</span>\n  <span class="token string">&quot;serve:dev&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;vite preview --mode dev&quot;</span>,\n  <span class="token comment"># 테스트 환경으로 빌드된 프로젝트 패키지 로컬 미리보기</span>\n  <span class="token string">&quot;serve:test&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;vite preview --mode test&quot;</span>,\n  <span class="token comment"># 업데이트 가능한 의존성 검사</span>\n  <span class="token string">&quot;npm:check&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;npx npm-check-updates&quot;</span>,\n  <span class="token comment"># node_modules 삭제</span>\n  <span class="token string">&quot;clean&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;npx rimraf node_modules&quot;</span>,\n  <span class="token comment"># 캐시 삭제</span>\n  <span class="token string">&quot;clean:cache&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;npx rimraf node_modules/.cache&quot;</span>,\n  <span class="token comment"># eslint 검사</span>\n  <span class="token string">&quot;lint:eslint&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;eslint --fix --ext .js,.ts,.vue ./src&quot;</span>,\n  <span class="token comment"># eslint 포맷팅</span>\n  <span class="token string">&quot;lint:format&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;prettier --write --loglevel warn <span class="token entity" title="\\&quot;">\\&quot;</span>src/**/*.{js,ts,json,tsx,css,less,vue,html,md}<span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span>,\n  <span class="token comment"># stylelint 포맷팅</span>\n  <span class="token string">&quot;lint:style&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;stylelint --fix <span class="token entity" title="\\&quot;">\\&quot;</span>**/*.{vue,less,postcss,css,scss}<span class="token entity" title="\\&quot;">\\&quot;</span> --cache --cache-location node_modules/.cache/stylelint/&quot;</span>,\n  <span class="token string">&quot;lint:lint-staged&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;lint-staged -c ./.husky/lintstagedrc.js&quot;</span>,\n  <span class="token string">&quot;lint:pretty&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;pretty-quick --staged&quot;</span>,\n  <span class="token string">&quot;postinstall&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;husky install&quot;</span>,\n  <span class="token comment"># 모듈 생성</span>\n  <span class="token string">&quot;p&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;plop&quot;</span>\n<span class="token punctuation">}</span>,\n</code></pre></div>',19);o.render=function(a,t,o,i,r,c){return n(),s("div",null,[l,e(' ### Gitee에서 코드 가져오기\n\n```bash\ngit clone https://gitee.com/kailong110120130/vue-element-plus-admin.git\n```\n\n::: tip 코드 동기화\n\n[Gitee](https://gitee.com/kailong110120130/vue-element-plus-admin)와 [Github](https://github.com/kailong321200875/vue-element-plus-admin) 코드 저장소가 동기화되지 않을까 걱정할 필요 없습니다.\n\n 버전이 제출되고 배포될 때마다 [Gitee](https://gitee.com/kailong110120130/vue-element-plus-admin)에서 즉시 동기화됩니다."\n\n::: '),p])};export default o;export{t as __pageData};
