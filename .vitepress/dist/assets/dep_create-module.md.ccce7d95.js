import{o as e,c as o,a as d}from"./app.4ba3de9e.js";const a='{"title":"템플릿 생성","description":"","frontmatter":{},"headers":[{"level":2,"title":"소개","slug":"소개"},{"level":2,"title":"컴포넌트 생성","slug":"컴포넌트-생성"},{"level":2,"title":"뷰 생성","slug":"뷰-생성"},{"level":2,"title":"확장 방법","slug":"확장-방법"}],"relativePath":"dep/create-module.md","lastUpdated":1722835573432}',c={},r=d('<h1 id="템플릿-생성"><a class="header-anchor" href="#템플릿-생성" aria-hidden="true">#</a> 템플릿 생성</h1><h2 id="소개"><a class="header-anchor" href="#소개" aria-hidden="true">#</a> 소개</h2><p>개발자가 <code>컴포넌트</code>와 <code>뷰</code> 파일을 빠르게 생성할 수 있도록 본 프로젝트에서는 <code>plop</code>를 사용하여 개발자가 통일된 파일 템플릿을 생성할 수 있도록 지원합니다.&quot;</p><h2 id="컴포넌트-생성"><a class="header-anchor" href="#컴포넌트-생성" aria-hidden="true">#</a> 컴포넌트 생성</h2><p>실행</p><div class="language-shell"><pre><code><span class="token function">npm</span> run p\n</code></pre></div><p><code>component</code>를 선택한 후, 컴포넌트 이름을 입력하면</p><p>예를 들어 <code>newCom</code>과 같이, <code>src/components</code> 디렉토리 아래에 해당 컴포넌트가 생성됩니다.</p><p>컴포넌트 이름의 첫 글자가 소문자인 경우, 자동으로 대문자로 변환됩니다.</p><h2 id="뷰-생성"><a class="header-anchor" href="#뷰-생성" aria-hidden="true">#</a> 뷰 생성</h2><p>실행</p><div class="language-shell"><pre><code><span class="token function">npm</span> run p\n</code></pre></div><p><code>view</code>를 선택한 후, 경로를 입력합니다. 기본값은 <code>views</code>이며, 그 다음에 모듈명을 입력하면 예를 들어 <code>newView</code>와 같이 <code>src/${views}</code> 디렉토리 아래에 해당 뷰 파일이 생성됩니다.&quot;</p><h2 id="확장-방법"><a class="header-anchor" href="#확장-방법" aria-hidden="true">#</a> 확장 방법</h2><p>추가적인 뷰 템플릿을 확장하려면, 루트 디렉토리의 <code>plopfile.js</code> 파일에서 초기 템플릿을 추가한 후, 루트 디렉토리의 <code>plop</code> 폴더에 해당 모듈 코드를 추가합니다. 자세한 내용은 <code>component</code> 아래의 코드를 참고하세요.</p><p>더 많은 <code>plop</code> 설정은 <a href="https://plopjs.com/documentation/" target="_blank" rel="noopener noreferrer">문서</a>를 참조하시면 됩니다.</p>',16);c.render=function(d,a,c,p,n,l){return e(),o("div",null,[r])};export default c;export{a as __pageData};
