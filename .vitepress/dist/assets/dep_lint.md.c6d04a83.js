import{o as s,c as t,a as e}from"./app.4ba3de9e.js";const n='{"title":"Lint","description":"","frontmatter":{},"headers":[{"level":2,"title":"소개","slug":"소개"},{"level":2,"title":"ESLint","slug":"eslint"},{"level":3,"title":"코드를 수동으로 검토","slug":"코드를-수동으로-검토"},{"level":3,"title":"설정 항목","slug":"설정-항목"},{"level":2,"title":"CommitLint","slug":"commitlint"},{"level":3,"title":"설정","slug":"설정"},{"level":3,"title":"Git 커밋 규칙","slug":"git-커밋-규칙"},{"level":3,"title":"종료 방법","slug":"종료-방법"},{"level":3,"title":"예시","slug":"예시"},{"level":2,"title":"Stylelint","slug":"stylelint"},{"level":3,"title":"설정","slug":"설정-1"},{"level":3,"title":"Editor 연동","slug":"editor-연동"},{"level":2,"title":"Prettier","slug":"prettier"},{"level":3,"title":"설정","slug":"설정-2"},{"level":3,"title":"Editor 연동","slug":"editor-연동-1"},{"level":2,"title":"Git Hook","slug":"git-hook"},{"level":3,"title":"husky","slug":"husky"},{"level":3,"title":"특정 검사를 건너뛰는 방법","slug":"특정-검사를-건너뛰는-방법"},{"level":3,"title":"lint-staged","slug":"lint-staged"}],"relativePath":"dep/lint.md","lastUpdated":1722835573433}',a={},i=e('<h1 id="lint"><a class="header-anchor" href="#lint" aria-hidden="true">#</a> Lint</h1><h2 id="소개"><a class="header-anchor" href="#소개" aria-hidden="true">#</a> 소개</h2><div class="tip custom-block"><p class="custom-block-title">lint를 사용하는 장점</p><p>기본적인 엔지니어링 소양을 갖춘 개발자라면 코드 규칙에 신경을 쓰게 됩니다. 코드 스타일 검사（Code Linting，줄여서 Lint）는 코드 규칙의 일관성을 보장하는 중요한 수단입니다.</p><p>적절한 코드 규칙을 따르는 것의 장점</p><ul><li>버그 오류율이 줄어듭니다.</li><li>효율적인 개발이 가능합니다.</li><li>가독성이 높아집니다.</li></ul></div><p>프로젝트에는 다음과 같은 코드 검증 방식이 통합되어 있습니다.</p><ol><li>eslint: 코드 형식 규칙 검증에 사용됩니다.</li><li>commitlint: git 커밋 메시지 규칙 검증에 사용됩니다.</li><li>stylelint: css/less 규칙 검증에 사용됩니다.</li><li>prettier: 코드 포맷팅에 사용됩니다.</li></ol><div class="warning custom-block"><p class="custom-block-title">주의</p><p>lint는 필수는 아니지만 매우 유용합니다. 프로젝트가 커지거나 참여 인원이 많아지면 다양한 코드 스타일이 나타나게 되며, 이는 이후 유지보수에 문제를 일으킬 수 있습니다.</p></div><h2 id="eslint"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> ESLint</h2><p>ESLint는 코드 규칙과 오류 검사를 위한 도구로, 팀의 규칙에 맞게 설정하여 사용할 수 있습니다.</p><h3 id="코드를-수동으로-검토"><a class="header-anchor" href="#코드를-수동으로-검토" aria-hidden="true">#</a> 코드를 수동으로 검토</h3><div class="language-bash"><pre><code><span class="token comment"># 아래 명령어를 실행하면, 수정 가능한 부분은 자동으로 수정되고, 수정할 수 없는 부분은 수동으로 수정해야 합니다.</span>\n<span class="token function">pnpm</span> run lint:eslint\n</code></pre></div><h3 id="설정-항목"><a class="header-anchor" href="#설정-항목" aria-hidden="true">#</a> 설정 항목</h3><p>프로젝트의 eslint 설정은 루트 디렉토리의 <strong>.eslintrc.js</strong> 파일에 위치해 있으며, 팀의 요규에 맞게 코드 규칙을 수정할 수 있습니다.</p><h2 id="commitlint"><a class="header-anchor" href="#commitlint" aria-hidden="true">#</a> CommitLint</h2><p>팀 내에서 각자의 git 커밋 정보가 서로 다르고, 다양한 스타일로 작성되면 규칙을 일관되게 유지하기 어렵습니다. 이를 규칙화하려면 git 훅 매커니즘을 사용해 셀 스크립트를 작성할 수 있습니다. 또한 JavaScript에는 이 템플릿을 구현할 수 있는 commitlint가 있습니다(git 커밋 메시지 규칙 검증 도구)</p><h3 id="설정"><a class="header-anchor" href="#설정" aria-hidden="true">#</a> 설정</h3><p>commit-lint의 설정은 프로젝트 루트 디렉토리의 <strong>commitlint.config.js</strong> 파일에 위치해 있습니다.</p><h3 id="git-커밋-규칙"><a class="header-anchor" href="#git-커밋-규칙" aria-hidden="true">#</a> Git 커밋 규칙</h3><ul><li><code>feat</code> 새로운 기능</li><li><code>fix</code> 버그 수정</li><li><code>docs</code> 문서</li><li><code>style</code> 포맷 및 스타일(코드 실행에 영향을 미치지 않는 변경)</li><li><code>refactor</code> 리팩토링(새 기능 추가나 버그 수정이 아닌 코드 변경)</li><li><code>perf</code> 성능 향상 관련 변경</li><li><code>test</code> 테스트 추가</li><li><code>build</code> 빌드 관련 변경(프로젝트 빌드나 의존성 변경)</li><li><code>ci</code> 지속적 통합 변경</li><li><code>chore</code> 빌드 프로세스나 도구 변경</li><li><code>revert</code> 이전 버전으로 되돌리기</li><li><code>workflow</code> 워크플로우 개선</li><li><code>mod</code> 분류가 불확실한 변경</li><li><code>wip</code> 개발중</li><li><code>types</code> 타입 관련 변경</li></ul><h3 id="종료-방법"><a class="header-anchor" href="#종료-방법" aria-hidden="true">#</a> 종료 방법</h3><p><code>.husky/commit-msg</code>파일 내에서 아래 코드를 주석 처리하면 됩니다.</p><div class="language-bash"><pre><code><span class="token comment"># npx --no-install commitlint --edit &quot;$1&quot;</span>\n</code></pre></div><h3 id="예시"><a class="header-anchor" href="#예시" aria-hidden="true">#</a> 예시</h3><div class="language-bash"><pre><code>\n<span class="token function">git</span> commit -m <span class="token string">&#39;feat: add new component&#39;</span>\n\n</code></pre></div><h2 id="stylelint"><a class="header-anchor" href="#stylelint" aria-hidden="true">#</a> Stylelint</h2><p>stylelint 프로젝트 내부의 css 스타일을 검증하는데 사용됩니다. 에디터의 자동 수정 기능을 추가하면 프로젝트 내부의 css 스타일을 잘 통일할 수 있습니다.</p><h3 id="설정-1"><a class="header-anchor" href="#설정-1" aria-hidden="true">#</a> 설정</h3><p>stylelint 설정은 루트 디렉토리의 <strong>stylelint.config.js</strong> 파일에 위치해 있습니다.</p><h3 id="editor-연동"><a class="header-anchor" href="#editor-연동" aria-hidden="true">#</a> Editor 연동</h3><p>VSCode를 사용하고 있다면, 아래 플러그인을 설치하면 파일을 저장할 때 자동으로 css스타일을 포맷팅할 수 있습니다.</p><p><strong>플러그인</strong></p><p><a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint" target="_blank" rel="noopener noreferrer">StyleLint</a></p><h2 id="prettier"><a class="header-anchor" href="#prettier" aria-hidden="true">#</a> Prettier</h2><p>prettier는 프로젝트의 코드 스타일을 통일하는 데 사용할 수 있습니다. 일관된 들여쓰기, 단일 및 이중 인용부호, 끝의 쉼표 등 다양한 스타일을 통일할 수 있습니다.</p><h3 id="설정-2"><a class="header-anchor" href="#설정-2" aria-hidden="true">#</a> 설정</h3><p>prettier 설정 파일은 프로젝트 루트 디렉토리의 <strong>prettier.config.js</strong> 파일에 위치해 있습니다.</p><h3 id="editor-연동-1"><a class="header-anchor" href="#editor-연동-1" aria-hidden="true">#</a> Editor 연동</h3><p>VSCode 편집기를 사용하고 있다면, 아래 플러그인을 설치하면 파일을 저장할 때 자동으로 JS 포맷을 적용할 수 있습니다.</p><p><strong>플러그인</strong></p><p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener noreferrer">Prettier</a></p><h2 id="git-hook"><a class="header-anchor" href="#git-hook" aria-hidden="true">#</a> Git Hook</h2><p>git hook은 일반적으로 다양한 lint 도구와 함께 사용되어 git 커밋 시 코드 스타일 검사를 수행합니다. 검사가 통과하지 않으면 커밋이 진행되지 않으며, 개발자는 수정 후 다시 커밋을 시도해야 합니다.</p><h3 id="husky"><a class="header-anchor" href="#husky" aria-hidden="true">#</a> husky</h3><p>문제 중 하나는 검사가 전체 코드에 대해 수행된다는 것입니다. 그러나 우리는 자신이 제출한 코드만 검토하고 싶습니다. 이럴 때는 husky를 사용할 수 있습니다.</p><p>가장 효과적인 해결책은 Lint 검사를 로컬에서 수행하는 것입니다. 일반적인 방법은 husky 또는 pre-commit을 사용하여 로컬에서 커밋하기 전에 Lint 검사를 수행하는 것입니다.</p><p>프로젝트는 <code>.husky</code> 폴더 내에 적절한 hooks를 정의하고 있습니다.</p><h3 id="특정-검사를-건너뛰는-방법"><a class="header-anchor" href="#특정-검사를-건너뛰는-방법" aria-hidden="true">#</a> 특정 검사를 건너뛰는 방법</h3><div class="language-bash"><pre><code><span class="token comment"># --no-verify를 추가하면 git hook 검사를 건너뛸 수 있습니다 (--no-verify의 축약형은 -n입니다).</span>\n<span class="token function">git</span> commit -m <span class="token string">&quot;xxx&quot;</span> --no-verify\n</code></pre></div><h3 id="lint-staged"><a class="header-anchor" href="#lint-staged" aria-hidden="true">#</a> lint-staged</h3><p>커밋 파일의 스타일 문제를 자동으로 수저하는 데 사용됩니다.</p><p><strong>lint-staged</strong> 설정은 프로젝트의 <code>.husky</code> 디렉토리 내에 있는 <strong>lintstagedrc.js</strong> 파일에 위치해 있습니다.</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 지정된 형식의 파일에 대해 커밋할 때 해당 수정 명령을 실행합니다.</span>\n  <span class="token string">&#39;*.{js,jsx,ts,tsx}&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;eslint --fix&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;prettier --write&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;{!(package)*.json,*.code-snippets,.!(browserslist)*rc}&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;prettier --write--parser json&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;package.json&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;prettier --write&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;*.vue&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;eslint --fix&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;stylelint --fix&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;prettier --write&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;git add .&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;*.{scss,less,styl,css,html}&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;stylelint --fix&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;prettier --write&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;git add .&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;*.md&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;prettier --write&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',51);a.render=function(e,n,a,l,o,p){return s(),t("div",null,[i])};export default a;export{n as __pageData};
