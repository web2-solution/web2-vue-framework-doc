import{o as n,c as s,a}from"./app.4ba3de9e.js";const t='{"title":"컴포넌트 등록","description":"","frontmatter":{},"headers":[{"level":2,"title":"필요에 따라 가져오기","slug":"필요에-따라-가져오기"},{"level":3,"title":"tsx 파일 등록","slug":"tsx-파일-등록"},{"level":2,"title":"전역 등록","slug":"전역-등록"}],"relativePath":"guide/component.md","lastUpdated":1722835573433}',p={},e=a('<h1 id="컴포넌트-등록"><a class="header-anchor" href="#컴포넌트-등록" aria-hidden="true">#</a> 컴포넌트 등록</h1><h2 id="필요에-따라-가져오기"><a class="header-anchor" href="#필요에-따라-가져오기" aria-hidden="true">#</a> 필요에 따라 가져오기</h2><p>현재 프로젝트의 컴포넌트 등록 방식은 필요에 따라 등록되는 방식입니다. 즉, 필요한 페이지에서만 컴포넌트를 가져옵니다</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ElBacktop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-plus&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useDesign <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/hooks/web/useDesign&#39;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> getPrefixCls<span class="token punctuation">,</span> variables <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useDesign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> prefixCls <span class="token operator">=</span> <span class="token function">getPrefixCls</span><span class="token punctuation">(</span><span class="token string">&#39;backtop&#39;</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ElBacktop</span>\n    <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>`${prefixCls}-backtop`<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">:target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>`.${variables.namespace}-layout-content-scrollbar .${variables.elNamespace}-scrollbar__wrap`<span class="token punctuation">&quot;</span></span>\n  <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre></div><h3 id="tsx-파일-등록"><a class="header-anchor" href="#tsx-파일-등록" aria-hidden="true">#</a> tsx 파일 등록</h3><p><strong>tsx 파일 내에서는 전역 등록된 컴포넌트를 사용할 수 없습니다</strong>，컴포넌트를 수동으로 가져와서 사용해야 합니다.</p><h2 id="전역-등록"><a class="header-anchor" href="#전역-등록" aria-hidden="true">#</a> 전역 등록</h2><p>필요에 따라 가져오는 방식이 번거롭게 느껴진다면, 전역 등록을 사용할 수 있습니다.</p><p>이 경우,<a href="https://github.com/web2-solution/web2-vue-framework/blob/demo/src/components/index.ts" target="_blank" rel="noopener noreferrer">src/components/index.ts</a>파일에 등록할 컴포넌트를 추가하면 됩니다.</p><p>현재 <code>Icon</code> 컴포넌트만 전역으로 등록되어 있습니다.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Icon <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Icon&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> setupGlobCom <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token operator">&lt;</span>Element<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;Icon&#39;</span><span class="token punctuation">,</span> Icon<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p>만약 <code>element-plus</code>의 컴포넌트를 전역 등록해야 한다면, <a href="https://github.com/web2-solution/web2-vue-framework/blob/demo/src/plugins/elementPlus/index.ts" target="_blank" rel="noopener noreferrer">src/plugins/elementPlus/index.ts</a> 파일에 등록할 컴포넌트를 추가하세요.</p><p>현재 <code>element-plus</code> 에서는 <code>ElLoading</code> 과 <code>ElScrollbar</code>만 전역 등록되어 있습니다.</p><div class="language-"><pre><code>import type { App } from &#39;vue&#39;\n\n// 일부 컴포넌트, 예를 들어 ElScrollbar를 전역적으로 등록해야 합니다. \n// 그렇지 않으면 드롭다운 항목의 스타일이 제대로 적용되지 않을 수 있습니다.\nimport { ElLoading, ElScrollbar } from &#39;element-plus&#39;\n\nconst plugins = [ElLoading]\n\nconst components = [ElScrollbar]\n\nexport const setupElementPlus = (app: App) =&gt; {\n  plugins.forEach((plugin) =&gt; {\n    app.use(plugin)\n  })\n\n  components.forEach((component) =&gt; {\n    app.component(component.name, component)\n  })\n}\n\n</code></pre></div>',14);p.render=function(a,t,p,o,c,l){return n(),s("div",null,[e])};export default p;export{t as __pageData};
